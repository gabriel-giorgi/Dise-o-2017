package sistemapagoimpuestos.View.Admin.AbmGestionarImpuesto;

import exceptions.Excepciones;
import java.awt.Component;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Vector;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import sistemapagoimpuestos.Controller.ControladorGestionarTipoImpuesto;
import sistemapagoimpuestos.Dto.DTOTipoImpuesto;

/**
 *
 * @author lunamarcos
 */
public class IUGestionarTipoImpuesto extends javax.swing.JFrame {

    /**
     * Creates new form IUGestionarTipoImpuesto
     */
    public IUGestionarTipoImpuesto() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        label_codigo = new javax.swing.JLabel();
        textfield_codigo = new javax.swing.JTextField();
        button_consultar = new javax.swing.JButton();
        button_continuar = new javax.swing.JButton();
        button_nuevo = new javax.swing.JButton();
        separator_horizontal = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        label_codigo.setText("Código Tipo de Impuesto");

        button_consultar.setText("Consultar");
        button_consultar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_consultarActionPerformed(evt);
            }
        });

        button_continuar.setText("Continuar");
        button_continuar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_continuarActionPerformed(evt);
            }
        });

        button_nuevo.setText("Nuevo");
        button_nuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_nuevoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(75, 75, 75)
                .addComponent(button_consultar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(button_nuevo, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(75, 75, 75))
            .addGroup(layout.createSequentialGroup()
                .addGap(127, 127, 127)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(button_continuar)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(label_codigo)
                        .addGap(58, 58, 58)
                        .addComponent(textfield_codigo, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(126, Short.MAX_VALUE))
            .addComponent(separator_horizontal)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(133, 133, 133)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label_codigo)
                    .addComponent(textfield_codigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addComponent(button_continuar)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(separator_horizontal, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 77, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(button_consultar)
                            .addComponent(button_nuevo))
                        .addGap(41, 41, 41))))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void button_nuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_nuevoActionPerformed
        // TODO add your handling code here:
        // Le paso al controlador la opción seleccionada
        opcionSeleccionada("Alta", null);
    }//GEN-LAST:event_button_nuevoActionPerformed

    private void button_continuarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_continuarActionPerformed
        // TODO add your handling code here:
        // Le paso al controlador la opción seleccionada.
        try{
            opcionSeleccionada("Modificar", Integer.parseInt(textfield_codigo.getText()));
        }catch(NumberFormatException e){
            Excepciones.getInstance().camposRequerido(Arrays.asList("Codigo"));
        }
      
    }//GEN-LAST:event_button_continuarActionPerformed

    private void button_consultarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_consultarActionPerformed
        // TODO add your handling code here:
        // Le paso al controlador la opción seleccionada
        opcionSeleccionada("Consultar", null);
    }//GEN-LAST:event_button_consultarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(IUGestionarTipoImpuesto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(IUGestionarTipoImpuesto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(IUGestionarTipoImpuesto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IUGestionarTipoImpuesto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                IUGestionarTipoImpuesto pantallaPrincipal = new IUGestionarTipoImpuesto();
                pantallaPrincipal.setVisible(true);
            }
        });
    }
    
    // Funcion para mostrar la pantalla adecuada, en base a la opción seleccionada
    public void opcionSeleccionada(String opcion, Object object){
        switch(opcion) {
        case "Alta" :
        // Muestro pantalla de Alta
            IUGestionarTipoImpuestoAlta pantallaAlta = new IUGestionarTipoImpuestoAlta();
            pantallaAlta.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE); // Evito que se cierre al presionar x
            pantallaAlta.setVisible(true); // La hago visible
        break; // optional
   
        case "Modificar" :
        // Muestro pantalla de Modificación
            DTOTipoImpuesto dtoTi = ControladorGestionarTipoImpuesto.getInstance().obtenerTipoImpuesto((int) object);
            if(dtoTi != null){
                IUGestionarTipoImpuestoModificar pantallaModificar= new IUGestionarTipoImpuestoModificar();
                pantallaModificar.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE); // Evito que se cierre al presionar x
                pantallaModificar.setVisible(true); // La hago visible
                pantallaModificar.setTextfield_nombre(dtoTi.getNombreDTOTipoImpuesto());
                pantallaModificar.setNombre_actual(dtoTi.getNombreDTOTipoImpuesto());
                pantallaModificar.setCheckbox_esEditable(dtoTi.isEsMontoEditableDTOTipoImpuesto());
                if(dtoTi.getFechaHoraInhabilitacionDTOTipoImpuesto()==null){
                    pantallaModificar.setCheckbox_Habilitar(true);
                }else{
                    pantallaModificar.setCheckbox_Habilitar(false);
                }
            }
            
        break; // optional
        
        case "Consultar" :
        // Muestro pantalla de Consultar
            ArrayList<DTOTipoImpuesto> listDtoTipoImpuesto = ControladorGestionarTipoImpuesto.getInstance().obtenerTipoImpuestos();
            
            String [] columnas = {"Codigo", "Nombre","Monto Editable", "Estado"};
            DefaultTableModel dtm = new DefaultTableModel(null, columnas){
                 public Class<?> getColumnClass(int column) {
                      switch (column) {
                        case 0:
                            return Integer.class;
                        case 1:
                            return String.class;
                        case 2:
                            return Boolean.class;
                        case 3:
                            return Boolean.class;
                        default:
                            return null;
                    }
                 }
                 
            };
                
            
            for(DTOTipoImpuesto dtoTipoImpuesto :listDtoTipoImpuesto){
                Vector<Object> vect = new Vector<>();
                vect.add(dtoTipoImpuesto.getCodigoDTOTipoImpuesto());
                vect.add(dtoTipoImpuesto.getNombreDTOTipoImpuesto());
                vect.add(dtoTipoImpuesto.isEsMontoEditableDTOTipoImpuesto());

                if(dtoTipoImpuesto.getFechaHoraInhabilitacionDTOTipoImpuesto()!=null){
                    vect.add(false);
                }else{
                    vect.add(true);                   
                }                
                dtm.addRow(vect);
            }          
            
            DefaultTableCellRenderer r = new DefaultTableCellRenderer() {
            public Component getTableCellRendererComponent(JTable table, Object
                value, boolean isSelected, boolean hasFocus, int row, int column) {
                super.getTableCellRendererComponent(
                    table, value, isSelected, hasFocus, row, column);
                setHorizontalAlignment(JLabel.CENTER);
                return this;
            }
        };
            IUGestionarTipoImpuestoConsultar pantallaConsultar= new IUGestionarTipoImpuestoConsultar();
            pantallaConsultar.getTabla_tipo_impuesto().setModel(dtm);
            pantallaConsultar.getTabla_tipo_impuesto().getColumnModel().getColumn(0).setCellRenderer(r);
            pantallaConsultar.getTabla_tipo_impuesto().getColumnModel().getColumn(1).setCellRenderer(r);
            pantallaConsultar.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE); // Evito que se cierre al presionar x
            pantallaConsultar.setVisible(true); // La hago visible
            
        break; // optional
   
        // You can have any number of case statements.
        default : // Optional
        // Statements
        }
    }

    
    // Metodo iniciar
    public void iniciar(){
        //ControladorGestionarTipoImpuesto controlador = new ControladorGestionarTipoImpuesto();
        ControladorGestionarTipoImpuesto.getInstance().iniciar();
    }
    
    // Metodo nuevoTipoImpuesto (crea un tipoImpuesto)
    public void nuevoTipoImpuesto(int codigoTipoImpuestoIngres, String nombreTipoImpuestoIngres, boolean esMontoEditableIngres){
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton button_consultar;
    private javax.swing.JButton button_continuar;
    private javax.swing.JButton button_nuevo;
    private javax.swing.JLabel label_codigo;
    private javax.swing.JSeparator separator_horizontal;
    private javax.swing.JTextField textfield_codigo;
    // End of variables declaration//GEN-END:variables
}
