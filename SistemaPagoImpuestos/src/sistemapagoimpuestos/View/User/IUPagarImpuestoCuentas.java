package sistemapagoimpuestos.View.User;

import exceptions.Excepciones;
import java.awt.Component;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.WindowConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import sistemapagoimpuestos.Controller.ControladorPagarImpuestos;
import sistemapagoimpuestos.Dto.DTOCuentaBancaria;

/**
 *
 * @author lunamarcos
 */
public class IUPagarImpuestoCuentas extends javax.swing.JFrame {

    /**
     * Creates new form IUPagarImpuestoCuentas
     */
    public IUPagarImpuestoCuentas() {
        initComponents();
    }
    
    public IUPagarImpuestoCuentas(List<DTOCuentaBancaria> listaDTOCuentas, IUPagarImpuestoComprobantes pantallaComprobantes){
        initComponents();
        // Modifico la operación de cierre para no finalizar al presionar X
        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        // Modifico el Listener para el evento de la X
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent ev) {

            }
        });
        this.setPantallaComprobantes(pantallaComprobantes);
        cargarTablaCuentas(listaDTOCuentas);
        
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        label_seleccionarCuenta = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla_cuentas = new javax.swing.JTable();
        button_continuar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        label_seleccionarCuenta.setText("SELECCIONE UNA CUENTA");

        tabla_cuentas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tabla_cuentas);

        button_continuar.setText("Continuar");
        button_continuar.setToolTipText("");
        button_continuar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_continuarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(button_continuar)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(32, 32, 32)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 475, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(187, 187, 187)
                        .addComponent(label_seleccionarCuenta)))
                .addContainerGap(32, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(label_seleccionarCuenta)
                .addGap(28, 28, 28)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(button_continuar)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void button_continuarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_continuarActionPerformed
        // Seteo en el form de comprobantes los datos de la cuenta seleccionada
        try {
            // Obtento el código del elemento seleccionado
            int columnCode = 0;
            int rowSelected = tabla_cuentas.getSelectedRow();
            String cbu = tabla_cuentas.getModel().getValueAt(rowSelected, columnCode).toString();
            String nombreTipoCuenta = tabla_cuentas.getModel().getValueAt(rowSelected, 1).toString();
            this.getPantallaComprobantes().setLbl_out_cbu(cbu);
            this.getPantallaComprobantes().setLbl_out_tipo_Cuenta(nombreTipoCuenta);
            this.dispose();
        } catch (ArrayIndexOutOfBoundsException e) {
            //Excepciones.getInstance().camposRequerido(Arrays.asList("Codigo"));
            Excepciones.getInstance().objetoNoSeleccionado();
        }
    }//GEN-LAST:event_button_continuarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(IUPagarImpuestoCuentas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(IUPagarImpuestoCuentas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(IUPagarImpuestoCuentas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IUPagarImpuestoCuentas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new IUPagarImpuestoCuentas().setVisible(true);
            }
        });
    }
    
    // Método para cargar las cuentas en la tabla
    public void cargarTablaCuentas(List<DTOCuentaBancaria> listadoCuentas){
        
        // Muestro los datos en la tabla
        String[] columnas = {"CBU", "Tipo de Cuenta", "Monto disponible"};
        
        // Creo el modelo
        DefaultTableModel dtm = new DefaultTableModel(null, columnas) {
            
            // Sobreescribo el método para no permitir editar la 
            @Override
            public boolean isCellEditable(int row, int column) {
                //all cells false
                return false;
            }
    
            public Class<?> getColumnClass(int column) {
                switch (column) {
                    case 0:
                        return String.class;
                    case 1:
                        return String.class;
                    case 2:
                        return double.class;
                    default:
                        return null;
                }
            }

        };

        for (DTOCuentaBancaria dtoCuenta : listadoCuentas) {
            Vector<Object> vect = new Vector<>();
            vect.add(dtoCuenta.getCbuCuentaBancaria());
            vect.add(dtoCuenta.getNombreTipoCuenta());
            vect.add(dtoCuenta.getSaldoRecuperado());
            dtm.addRow(vect);
        }

        DefaultTableCellRenderer r = new DefaultTableCellRenderer() {
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                super.getTableCellRendererComponent(
                        table, value, isSelected, hasFocus, row, column);
                setHorizontalAlignment(JLabel.CENTER);
                return this;
            }
        };
        tabla_cuentas.setModel(dtm);
        tabla_cuentas.getColumnModel().getColumn(0).setCellRenderer(r);
        tabla_cuentas.getColumnModel().getColumn(1).setCellRenderer(r);
    }

    public void setPantallaComprobantes(IUPagarImpuestoComprobantes pantallaComprobantes) {
        this.pantallaComprobantes = pantallaComprobantes;
    }

    public IUPagarImpuestoComprobantes getPantallaComprobantes() {
        return pantallaComprobantes;
    }
    
    private IUPagarImpuestoComprobantes pantallaComprobantes;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton button_continuar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel label_seleccionarCuenta;
    private javax.swing.JTable tabla_cuentas;
    // End of variables declaration//GEN-END:variables
}
